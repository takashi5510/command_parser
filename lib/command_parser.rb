#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

require 'strscan'

class CommandParser < Racc::Parser

module_eval(<<'...end command_parser.y/module_eval...', 'command_parser.y', 25)
def parse(str)
  @yydebug = true
  s = StringScanner.new(str)
  @q = []
  until s.eos?
    # TODO: スペース未対応
    # TODO: \, \" 未対応
    case
    when s.scan(/[1-9][0-9]*/)
      @q << [:NUM, s.matched]
    when s.scan(/\w+/)
      @q << [:IDENT, s.matched]
    when s.scan(/./)
      @q << [s.matched, s.matched]
    when s.scan(/$/)
      @q << [:E, s.matched]
    else
      break
    end
  end
  p @q
  do_parse
end

def next_token
  @q.shift
end

...end command_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    28,     7,    17,     6,    27,    18,    13,    14,    15,    13,
    14,    15,    13,    14,    13,    14,    19,     3,    24,     5,
    26,     4,    16 ]

racc_action_check = [
    20,     4,     8,     3,    20,     8,     5,     5,     5,    18,
    18,    18,    28,    28,    15,    15,    13,     0,    16,     2,
    19,     1,     6 ]

racc_action_pointer = [
    13,    21,    17,    -2,     1,    -1,    17,   nil,    -1,   nil,
   nil,   nil,   nil,    12,   nil,     7,    14,   nil,     2,    13,
    -6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil ]

racc_action_default = [
   -16,   -16,   -16,   -16,   -16,    -5,   -16,    30,   -16,    -3,
    -6,    -7,    -8,   -16,   -10,   -16,   -16,    -1,   -16,   -16,
   -16,   -12,   -14,   -15,    -2,    -4,    -9,   -11,   -16,   -13 ]

racc_goto_table = [
    21,     9,    22,    23,    20,     2,     8,     1,   nil,   nil,
   nil,   nil,   nil,    29,    25,    22,    23 ]

racc_goto_check = [
     9,     4,     5,     6,     8,     2,     3,     1,   nil,   nil,
   nil,   nil,   nil,     9,     4,     5,     6 ]

racc_goto_pointer = [
   nil,     7,     5,     1,    -4,   -13,   -12,   nil,   -11,   -15 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    10,    11,    12,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  4, 12, :_reduce_1,
  4, 13, :_reduce_2,
  1, 14, :_reduce_3,
  3, 14, :_reduce_4,
  0, 14, :_reduce_none,
  1, 15, :_reduce_none,
  1, 15, :_reduce_none,
  1, 15, :_reduce_none,
  3, 16, :_reduce_9,
  1, 17, :_reduce_10,
  3, 18, :_reduce_11,
  1, 19, :_reduce_12,
  3, 19, :_reduce_13,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none ]

racc_reduce_n = 16

racc_shift_n = 30

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  ")" => 3,
  :IDENT => 4,
  ":" => 5,
  "," => 6,
  "\"" => 7,
  :NUM => 8,
  "[" => 9,
  "]" => 10 }

racc_nt_base = 11

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "\")\"",
  "IDENT",
  "\":\"",
  "\",\"",
  "\"\\\"\"",
  "NUM",
  "\"[\"",
  "\"]\"",
  "$start",
  "line",
  "func",
  "args",
  "arg",
  "str",
  "num",
  "ary",
  "items",
  "item" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'command_parser.y', 3)
  def _reduce_1(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'command_parser.y', 4)
  def _reduce_2(val, _values, result)
     result = val.join
    result
  end
.,.,

module_eval(<<'.,.,', 'command_parser.y', 5)
  def _reduce_3(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'command_parser.y', 6)
  def _reduce_4(val, _values, result)
     result << val[2]
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

module_eval(<<'.,.,', 'command_parser.y', 11)
  def _reduce_9(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'command_parser.y', 12)
  def _reduce_10(val, _values, result)
     result = val[0].to_i
    result
  end
.,.,

module_eval(<<'.,.,', 'command_parser.y', 13)
  def _reduce_11(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'command_parser.y', 14)
  def _reduce_12(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'command_parser.y', 15)
  def _reduce_13(val, _values, result)
     result << val[2]
    result
  end
.,.,

# reduce 14 omitted

# reduce 15 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class CommandParser

if __FILE__ == $0
  parser = CommandParser.new
  begin
    p parser.parse(ARGV[0])
  rescue Racc::ParseError => e
    $stderr.puts e
  end
end
